name: Forecast on Metaculus Cup (every 2 days @ 00:00 UTC)

on:
  schedule:
    - cron: "0 0 */2 * *"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  forecast_job:
    runs-on: ubuntu-latest

    env:
      # ---- Required / identity ----
      GIT_SHA: ${{ github.sha }}
      METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
      # Metaculus renamed the Cup slug for Fall 2025; keep this in sync with the live tournament URL.
      TOURNAMENT_ID: metaculus-cup-fall-2025
      SUBMIT_PREDICTION: "1"

      # ---- LLM providers ----
      USE_OPENROUTER: "1"
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      OPENROUTER_BASE_URL: https://openrouter.ai/api/v1
      OPENROUTER_FALLBACK_ID: openai/gpt-4o
      OPENROUTER_GPT5_ID: openai/gpt-4o
      OPENROUTER_GPT5_THINK_ID: openai/gpt-4o
      OPENROUTER_CLAUDE37_ID: anthropic/claude-3.7-sonnet
      OR_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      USE_GOOGLE: "1"
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GEMINI_MODEL: gemini-2.5-pro
      GEMINI_MODEL_ID: gemini-2.5-pro
      GEMINI_CALL_TIMEOUT_SEC: "300"
      GPT5_CALL_TIMEOUT_SEC: "300"

      ENABLE_GROK: "1"
      XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
      XAI_BASE_URL: https://api.x.ai/v1/chat/completions
      XAI_GROK_ID: grok-4
      GROK_MODEL_ID: grok-4
      GROK_CALL_TIMEOUT_SEC: "300"

      # ---- Optional providers ----
      PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      EXA_API_KEY: ${{ secrets.EXA_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_BASE_URL:

      # ---- Spagbot behavior ----
      ENABLE_MARKET_SNAPSHOT: "1"
      MARKET_SNAPSHOT_MAX_MATCHES: "10"
      LLM_MAX_CONCURRENCY: "4"
      SPAGBOT_DISABLE_CLASSIFIER_CACHE: "1"
      SPAGBOT_DISABLE_RESEARCH_CACHE: "1"  

      # ---- Knobs ----
      RESEARCH_TEMP: "0.10"
      RESEARCH_TOP_P: "0.90"
      MIN_ANCHOR_MATCH: "2"
      SALVAGE_MIN_MATCH: "1"
      REQUIRE_YEAR_IF_PRESENT: "0"
      FORECAST_TEMP: "0.00"
      FORECAST_TOP_P: "0.10"
      GTMC1_ACTIVATION_THRESHOLD: "0.50"
      HUMAN_LOG_MODEL_RAW_MAX_CHARS: "10000"
      HUMAN_LOG_RESEARCH_MAX_CHARS: "20000"
      RESEARCH_SNIPPET_MAX_CHARS: "600"

      # ---- CSV output ----
      FORECASTS_CSV_PATH: forecasts.csv
      LOGS_BASE_DIR: forecast_logs           # save human logs here

      # Seen Guard controls
      # set to "48" if you want a 2-day re-forecast cool-down window
      SEEN_COOLDOWN_HOURS: "48"   
      FORECAST_LOCK_DIR: forecast_logs/locks
      SEEN_GUARD_PATH: forecast_logs/state/seen_forecasts.jsonl

      # Log GitHub Commit config 
      HUMAN_LOG_EXT: md
      DISABLE_GIT_LOGS: "false"
      COMMIT_LOGS: true 
      GIT_LOG_MESSAGE:"chore(logs): append forecasts & run logs"
      GIT_REMOTE_NAME: origin
      GIT_BRANCH_NAME: main 
      # Optional: one markdown file per run (no subfolder) is 1; blank means one file per question
      HUMAN_LOG_FLAT:

      #GTMC1 Debug
      SPAGBOT_DEBUG_RAW: "1"

       # ---- Cost table (string JSON) ----
      MODEL_COSTS_JSON: |
        {"openai/gpt-4o":{"prompt":0.0025,"completion":0.01},"anthropic/claude-3.7-sonnet":{"prompt":0.003,"completion":0.015},"gemini-2.5-pro":{"prompt":0.00125,"completion":0.01},"grok-4":{"prompt":0.003,"completion":0.015}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pipx install poetry

      - name: Refresh lock (portable)
        shell: bash
        run: |
          set -euo pipefail
          echo "==> Refreshing poetry.lock (portable)…"
          # On Poetry 2.2.x there’s no --check. Keep it simple & deterministic.
          poetry lock --no-interaction
          echo "Regenerated/validated poetry.lock."
          if [[ "${COMMIT_LOCKFILE:-0}" == "1" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add poetry.lock
            if ! git diff --cached --quiet; then
              git commit -m "chore(deps): refresh poetry.lock [skip ci]"
              # Rebase to avoid “fetch first” rejects on busy branches.
              git pull --rebase origin "${GIT_BRANCH_NAME:-main}" || true
              git push origin "HEAD:${GIT_BRANCH_NAME:-main}"
            else
              echo "poetry.lock unchanged; skip commit."
            fi
          fi

      - name: Install dependencies
        run: poetry sync --no-interaction --no-ansi

      - name: Run Spagbot (Metaculus Cup)
        run: |
          poetry run python run_spagbot.py --mode tournament --limit 20 --submit --purpose metaculus_cup

      - name: Commit & push forecasts (only if changed)
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Add both CSV and logs; either may change.
          git add -A forecasts.csv forecast_logs || true
          if git diff --cached --quiet; then
            echo "No forecast changes; skipping push."
            exit 0
          fi
          git commit -m "chore(ci): update forecasts"
          # Avoid non-fast-forward errors on busy main.
          git pull --rebase origin "${GIT_BRANCH_NAME:-main}" || true
          git push origin "HEAD:${GIT_BRANCH_NAME:-main}"

      - name: Pre-clean repo before committing logs
        shell: bash
        run: |
          set -euo pipefail
          # Abort any in-progress merge or rebase (no-ops if none)
          git merge --abort 2>/dev/null || true
          git rebase --abort 2>/dev/null || true
          git am --abort 2>/dev/null || true
          # If there are unmerged files, clean them so the logs commit can proceed
          if git diff --name-only --diff-filter=U | grep . >/dev/null 2>&1; then
            echo "Found unmerged files; resetting worktree to HEAD to avoid CI deadlock."
            git reset --hard HEAD
          fi
          # Ensure advice about adding ignored files doesn't spam logs
          git config advice.addIgnoredFile false

      - name: Commit logs (if changed)
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add forecast_logs/** || true
          if git diff --cached --quiet; then
            echo "No new forecast data to commit."
            exit 0
          fi
          git commit -m "feat: Metaculus Cup forecasts [skip ci]"
          git pull --rebase origin "${GIT_BRANCH_NAME:-main}" || true
          git push origin "HEAD:${GIT_BRANCH_NAME:-main}"

      - id: upload_artifact
        name: Upload run artifacts (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spagbot-cup-run-${{ github.run_id }}
          path: |
            forecast_logs/**
            forecasts.csv

      - name: Skip note
        if: steps.upload_artifact.outcome == 'skipped'
        run: echo "No posts processed; artifact may be empty."
